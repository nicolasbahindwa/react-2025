@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
@use "sass:list";
@use "sass:color";
@use "../functions/" as *;
@use "../abstracts/variables" as *;
@use "../base/colors" as *;
 


// Responsive Width Utilities
$breakpoints: (
  'sm': 320px,    // mobile
  'md': 789px,    // tablet
  'lg': 1024px,   // small desktop
  'xl': 1300px    // large desktop
);

$widths: (
  'sm': 100%,     // full width for mobile
  'md': 750px,    // tablet width
  'lg': 1024px,    // small desktop width
  'xl': 1200px,   // large desktop width
  'full': 100%
);

// Generate width utility classes
@mixin generate-width-classes {
  // Base classes
  @each $size, $width in $widths {
    .w-#{$size} {
      width: $width;
    }
  }

  // Responsive classes
  @each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
      @each $size, $width in $widths {
        .#{$breakpoint}\:w-#{$size} {
          width: $width;
        }
      }
    }
  }
}

// Usage: Include the mixin to generate the classes
@include generate-width-classes;


// icons size:
// Define a map of icon sizes
$icon-sizes: (
  'xs': 12px,
  'sm': 16px,
  'md': 24px,
  'lg': 32px,
  'xl': 48px,
  'xxl': 64px,
);

// Generate icon size classes
@each $name, $size in $icon-sizes {
  .icon-#{$name} {
    width: $size;
    height: $size;
    // Ensure icons maintain their aspect ratio
    object-fit: contain;
  }
}

// Optional: Add a class for responsive icons
.icon-responsive {
  width: 100%;
  height: auto;
}


// color mixin

@mixin generate-theme($mode: 'light') {
  @if $mode != 'light' and $mode != 'dark' {
    @error 'Invalid theme mode. Use "light" or "dark".';
  }

  // Background Colors
  --color-bg-primary: #{get-color('neutral', if($mode == 'light', 50, 900))};
  --color-bg-secondary: #{get-color('neutral', if($mode == 'light', 100, 800))};
  --color-bg-tertiary: #{get-color('neutral', if($mode == 'light', 200, 700))};

  // Text Colors
  --color-text-primary: #{get-color('neutral', if($mode == 'light', 900, 50))};
  --color-text-secondary: #{get-color('neutral', if($mode == 'light', 700, 200))};
  --color-text-muted: #{get-color('neutral', if($mode == 'light', 500, 400))};

  // Brand Colors
  // @each $type in ('primary', 'secondary') {
  //   @each $variant in ('base', 'light', 'dark', 'muted') {
  //     --color-brand-#{$type}-#{$variant}: #{if($mode == 'light', get-color('brand', $type, $variant), color.scale(get-color('brand', $type, $variant), $lightness: 20%))};
  //   }
  // }

  // // State Colors
  // @each $state in ('success', 'warning', 'error') {
  //   @each $variant in ('base', 'light', 'dark') {
  //     --color-#{$state}-#{$variant}: #{if($mode == 'light', get-color('state', $state, $variant), color.scale(get-color('state', $state, $variant), $lightness: 20%))};
  //   }
  // }

  // // Border and Divider Colors
  // --color-border-primary: #{get-color('neutral', if($mode == 'light', 300, 600))};
  // --color-border-subtle: #{get-color('neutral', if($mode == 'light', 200, 700))};

  // // Overlay Variations
  // @each $intensity in ('light', 'medium', 'dark') {
  //   $base-color: get-color('neutral', if($mode == 'light', 900, 50));
  //   @if type-of($base-color) == 'color' {
  //     --color-overlay-#{$intensity}: #{rgba($base-color, if($mode == 'light', 0.1 * list.index(('light', 'medium', 'dark'), $intensity), 0.2 * list.index(('light', 'medium', 'dark'), $intensity)))};
  //   } @else {
  //     @error '$base-color: #{get-color("neutral", if($mode == "light", 900, 50))} is not a color.';
  //   }
  // }
}


