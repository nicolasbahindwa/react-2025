@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
@use "./variables" as v;
@use "../base/colors" as c;

// Media query mixin
@mixin media-up($breakpoint) {
  @if map.has-key(v.$breakpoints, $breakpoint) {
    @media (min-width: map.get(v.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Breakpoint `#{$breakpoint}` not found in $breakpoints map.";
  }
}

// Spacing utilities
@mixin generate-spacing-utilities($spacings) {
  @each $space-key, $space-value in $spacings {
    .m-#{$space-key} { margin: $space-value; }
    .mx-#{$space-key} { margin-inline: $space-value; }
    .my-#{$space-key} { margin-block: $space-value; }
    .mt-#{$space-key} { margin-top: $space-value; }
    .mb-#{$space-key} { margin-bottom: $space-value; }
    .ml-#{$space-key} { margin-left: $space-value; }
    .mr-#{$space-key} { margin-right: $space-value; }

    .p-#{$space-key} { padding: $space-value; }
    .px-#{$space-key} { padding-inline: $space-value; }
    .py-#{$space-key} { padding-block: $space-value; }
    .pt-#{$space-key} { padding-top: $space-value; }
    .pb-#{$space-key} { padding-bottom: $space-value; }
    .pl-#{$space-key} { padding-left: $space-value; }
    .pr-#{$space-key} { padding-right: $space-value; }
  }
}
@include generate-spacing-utilities(v.$spacings);



// Typography utilities
@mixin generate-font-size-utilities($font-sizes) {
  @each $size-key, $size-value in $font-sizes {
    .text-#{$size-key} { font-size: $size-value; }
  }
}
@include generate-font-size-utilities(v.$font-sizes);

// Line height utilities
@mixin generate-line-height-utilities($line-heights) {
  @each $height-key, $height-value in $line-heights {
    .leading-#{$height-key} { line-height: $height-value; }
  }
}
@include generate-line-height-utilities(v.$line-heights);



// Gap utilities
@mixin generate-gap-utilities($spacings) {
  @each $space-key, $space-value in $spacings {
    .gap-#{$space-key} { gap: $space-value; }
    .gap-x-#{$space-key} { column-gap: $space-value; }
    .gap-y-#{$space-key} { row-gap: $space-value; }
  }
}
@include generate-gap-utilities(v.$spacings);

// Opacity utilities
@mixin generate-opacity-utilities($increment: 25) {
  @for $i from 0 through 100 {
    @if $i % $increment == 0 {
      .opacity-#{$i} { opacity: math.div($i, 100); }
    }
  }
}
@include generate-opacity-utilities(25);

// Z-index utilities
@mixin generate-z-index-utilities($max: 50, $increment: 10) {
  @for $i from 0 through $max {
    @if $i % $increment == 0 {
      .z-#{$i} { z-index: $i; }
    }
  }
}
@include generate-z-index-utilities(50, 10);

// Responsive utilities
@mixin generate-responsive-utilities($property, $values, $prefix: '') {
  @each $breakpoint-key, $breakpoint-value in v.$breakpoints {
    @media (min-width: $breakpoint-value) {
      @each $key, $value in $values {
        .#{$breakpoint-key}\:#{$prefix}#{$key} {
          #{$property}: $value;
        }
      }
    }
  }
}
@include generate-responsive-utilities('font-size', v.$font-sizes, 'text-');
@include generate-responsive-utilities('margin', v.$spacings, 'm-');
@include generate-responsive-utilities('padding', v.$spacings, 'p-');

// Animation utilities
@mixin generate-animation-utilities($animations) {
  @each $name, $value in $animations {
    .#{$name} { animation: $value; }
  }
}
@include generate-animation-utilities(v.$animations);

// borders
// borders
@mixin generate-border-utilities {
    // Border width utilities
    @each $key, $value in v.$border-widths {
        .border-#{$key} { border-width: $value; }
    }

    // Border color utilities using your custom colors
    @each $color-name, $color-map in (primary: c.$color-primary, neutral: c.$color-neutral) {
        @each $shade, $value in $color-map {
            .border-#{$color-name}-#{$shade} { border-color: $value; }
        }
    }

    // Border radius utilities
    @each $key, $value in v.$border-radius {
        .rounded-#{$key} { border-radius: $value; }
    }
}
@include generate-border-utilities();

// Border radius utilities
@mixin generate-border-radius-utilities($border-radius) {
    @each $radius-key, $radius-value in $border-radius {
        .rounded-#{$radius-key} { border-radius: $radius-value; }
    }
}
@include generate-border-radius-utilities(v.$border-radius);



 // placeholder
 /* Base placeholder style for input fields */
.input-placeholder::placeholder {
    color: #a0a0a0; /* Light gray color for placeholder text */
    font-style: italic; /* Italicize the placeholder text */
    opacity: 1; /* Ensure the placeholder is fully visible */
}

/* Optional: Add animation for a shimmer effect */
.input-placeholder-shimmer::placeholder {
    animation: placeholder-shimmer 1.5s infinite ease-in-out;
}

@keyframes placeholder-shimmer {
    0% { opacity: 0.5; }
    50% { opacity: 1; }
    100% { opacity: 0.5; }
}


// Mixin to generate text color classes
@mixin generate-text-color-classes($color-map, $class-prefix) {
    @each $key, $color in $color-map {
      .#{$class-prefix}-#{$key} {
        color: $color;
      }
    }
  }
  
  // Include the mixin for each color map
  @include generate-text-color-classes(c.$color-primary, "text-primary");
  @include generate-text-color-classes(c.$color-neutral, "text-neutral");
  @include generate-text-color-classes(c.$color-success, "text-success");
  @include generate-text-color-classes(c.$color-warning, "text-warning");
  @include generate-text-color-classes(c.$color-error, "text-error");
  @include generate-text-color-classes(c.$color-info, "text-info");
  

// Define font sizes up to 40px with 1px increments
@mixin font-size-utilities($prefix, $property, $max, $step) {
    @for $i from 1 through $max {
        @if $i % $step == 0 {
            .#{$prefix}-#{$i} { #{$property}: #{$i}px; }
        }
    }
}

// Include the mixin for font sizes
@include font-size-utilities('text', 'font-size', 40, 1);


@mixin generate-text-utilities($font-weights, $font-styles, $dynamic-weights: ()) {
    // Generate font weight utilities (e.g., font-bold, font-[400])
    @each $weight-key, $weight-value in $font-weights {
      .font-#{$weight-key} {
        font-weight: $weight-value;
      }
    }
  
    // Generate dynamic font weight utilities (e.g., font-[400])
    @each $dynamic-weight in $dynamic-weights {
      .font-\[#{$dynamic-weight}\] {
        font-weight: #{$dynamic-weight};
      }
    }
  
    // Generate font style utilities (e.g., font-italic)
    @each $style-key, $style-value in $font-styles {
      .font-#{$style-key} {
        font-style: $style-value;
      }
    }
  }
  
  // Define your font weights, styles, and dynamic weights
  $font-weights: (
    thin: 100,
    extralight: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    "black": 900, // Quote the key
  );
  
  $font-styles: (
    italic: italic,
    normal: normal,
    oblique: oblique,
  );
  
  $dynamic-weights: (
    400,
    500,
    600,
    700,
  );
  
  // Include the mixin
  @include generate-text-utilities($font-weights, $font-styles, $dynamic-weights);


// Hardcoded utilities (consider creating mixins for these)
.block { display: block; }
.inline-block { display: inline-block; }
.inline { display: inline; }
.flex { display: flex; }
.inline-flex { display: inline-flex; }
.grid { display: grid; }
.inline-grid { display: inline-grid; }
.hidden { display: none; }

// Flex utilities
.flex-row { flex-direction: row; }
.flex-row-reverse { flex-direction: row-reverse; }
.flex-col { flex-direction: column; }
.flex-col-reverse { flex-direction: column-reverse; }

.flex-wrap { flex-wrap: wrap; }
.flex-nowrap { flex-wrap: nowrap; }
.flex-wrap-reverse { flex-wrap: wrap-reverse; }

.flex-1 { flex: 1 1 0%; }
.flex-auto { flex: 1 1 auto; }
.flex-initial { flex: 0 1 auto; }
.flex-none { flex: none; }

// Justify content
.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }

// Align items
.items-start { align-items: flex-start; }
.items-end { align-items: flex-end; }
.items-center { align-items: center; }
.items-baseline { align-items: baseline; }
.items-stretch { align-items: stretch; }

// Grid utilities
.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
.grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
.grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
.grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }

// Cursor utilities
.cursor-default { cursor: default; }
.cursor-pointer { cursor: pointer; }
.cursor-not-allowed { cursor: not-allowed; }
.cursor-wait { cursor: wait; }
.cursor-text { cursor: text; }

// Width and height utilities
.w-full { width: 100%; }
.w-screen { width: 100vw; }
.w-auto { width: auto; }
.w-min { width: min-content; }
.w-max { width: max-content; }
.w-fit { width: fit-content; }

.h-full { height: 100%; }
.h-screen { height: 100vh; }
.h-auto { height: auto; }
.h-min { height: min-content; }
.h-max { height: max-content; }
.h-fit { height: fit-content; }

// Position utilities
.relative { position: relative; }
.absolute { position: absolute; }
.fixed { position: fixed; }
.sticky { position: sticky; }
.static { position: static; }
.top-0 { top: 0; }
.top-auto { top: auto; }
.left-0 { left: 0; }
.left-auto { left: auto; }
.right-0 { right: 0; }
.right-auto { right: auto; }
.bottom-0 { bottom: 0; }
.bottom-auto { bottom: auto; }

// Text alignment
.text-left { text-align: left; }
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-justify { text-align: justify; }

// Text decoration
.underline { text-decoration: underline; }
.line-through { text-decoration: line-through; }
.no-underline { text-decoration: none; }

// Text transform
.uppercase { text-transform: uppercase; }
.lowercase { text-transform: lowercase; }
.capitalize { text-transform: capitalize; }
.normal-case { text-transform: none; }

// Border utilities
// .border { border: 1px solid rgb(var(--border-primary)); }
// .border-0 { border-width: 0; }
// .border-2 { border-width: 2px; }
// .border-4 { border-width: 4px; }

// Overflow utilities
.overflow-auto { overflow: auto; }
.overflow-hidden { overflow: hidden; }
.overflow-visible { overflow: visible; }
.overflow-scroll { overflow: scroll; }
.overflow-x-auto { overflow-x: auto; }
.overflow-y-auto { overflow-y: auto; }