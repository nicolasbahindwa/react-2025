@use "sass:math";
@use "sass:map";
@use "../themes/variables" as v;
 


// Base styles
html {
  font-family: v.$font-family-base;
  font-size: 16px;
  line-height: map.get(v.$line-heights, normal);
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  margin: 0;
  background-color: var(--bg-primary);
  color: var(--text-primary);
  font-weight: 400;
}

// Utility classes
.container {
  width: 100%;
  margin-inline: auto;
  padding-inline: map.get(v.$spacings, 4);
  max-width: map.get(v.$breakpoints, xl);
}

// Media query mixin
@mixin media-up($breakpoint) {
  @if map.has-key(v.$breakpoints, v.$breakpoint) {
    @media (min-width: map.get(v.$breakpoints, v.$breakpoint)) {
      @content;
    }
  }
}

// Spacing utilities
@each $space-key, $space-value in v.$spacings {
  .m-#{$space-key} { margin: $space-value; }
  .mx-#{$space-key} { margin-inline: $space-value; }
  .my-#{$space-key} { margin-block: $space-value; }
  .mt-#{$space-key} { margin-top: $space-value; }
  .mb-#{$space-key} { margin-bottom: $space-value; }
  .ml-#{$space-key} { margin-left: $space-value; }
  .mr-#{$space-key} { margin-right: $space-value; }

  .p-#{$space-key} { padding: $space-value; }
  .px-#{$space-key} { padding-inline: $space-value; }
  .py-#{$space-key} { padding-block: $space-value; }
  .pt-#{$space-key} { padding-top: $space-value; }
  .pb-#{$space-key} { padding-bottom: $space-value; }
  .pl-#{$space-key} { padding-left: $space-value; }
  .pr-#{$space-key} { padding-right: $space-value; }
}

// Typography utilities
@each $size-key, $size-value in v.$font-sizes {
  .text-#{$size-key} { font-size: $size-value; }
}


// Display utilities
.block { display: block; }
.inline-block { display: inline-block; }
.inline { display: inline; }
.flex { display: flex; }
.inline-flex { display: inline-flex; }
.grid { display: grid; }
.inline-grid { display: inline-grid; }
.hidden { display: none; }

// Flex utilities
.flex-row { flex-direction: row; }
.flex-row-reverse { flex-direction: row-reverse; }
.flex-col { flex-direction: column; }
.flex-col-reverse { flex-direction: column-reverse; }

.flex-wrap { flex-wrap: wrap; }
.flex-nowrap { flex-wrap: nowrap; }
.flex-wrap-reverse { flex-wrap: wrap-reverse; }

.flex-1 { flex: 1 1 0%; }
.flex-auto { flex: 1 1 auto; }
.flex-initial { flex: 0 1 auto; }
.flex-none { flex: none; }

// Justify content
.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }
.justify-self-auto { justify-self: auto; }
.justify-self-start { justify-self: start; }
.justify-self-end { justify-self: end; }
.justify-self-center { justify-self: center; }
.justify-self-stretch { justify-self: stretch; }


// Align items
.items-start { align-items: flex-start; }
.items-end { align-items: flex-end; }
.items-center { align-items: center; }
.items-baseline { align-items: baseline; }
.items-stretch { align-items: stretch; }

.align-self-auto { align-self: auto; }
.align-self-start { align-self: start; }
.align-self-end { align-self: end; }
.align-self-center { align-self: center; }
.align-self-stretch { align-self: stretch; }

// Grid utilities
.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
.grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
.grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
.grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }


// Cursor utilities
.cursor-default { cursor: default; }
.cursor-pointer { cursor: pointer; }
.cursor-not-allowed { cursor: not-allowed; }
.cursor-wait { cursor: wait; }
.cursor-text { cursor: text; }

// Gap utilities
@each $space-key, $space-value in v.$spacings {
  .gap-#{$space-key} { gap: $space-value; }
  .gap-x-#{$space-key} { column-gap: $space-value; }
  .gap-y-#{$space-key} { row-gap: $space-value; }
}

// Width and height utilities
.w-full { width: 100%; }
.w-screen { width: 100vw; }
.w-auto { width: auto; }
.w-min { width: min-content; }
.w-max { width: max-content; }
.w-fit { width: fit-content; }

.h-full { height: 100%; }
.h-screen { height: 100vh; }
.h-auto { height: auto; }
.h-min { height: min-content; }
.h-max { height: max-content; }
.h-fit { height: fit-content; }

// Position utilities
.relative { position: relative; }
.absolute { position: absolute; }
.fixed { position: fixed; }
.sticky { position: sticky; }
.static { position: static; }
.top-0 { top: 0; }
.top-auto { top: auto; }
.left-0 { left: 0; }
.left-auto { left: auto; }
.right-0 { right: 0; }
.right-auto { right: auto; }
.bottom-0 { bottom: 0; }
.bottom-auto { bottom: auto; }


// Font weight utilities
// .font-normal { font-weight: 400; }
// .font-medium { font-weight: 500; }
// .font-semibold { font-weight: 600; }
// .font-bold { font-weight: 700; }

// Line height utilities
@each $height-key, $height-value in v.$line-heights {
  .leading-#{$height-key} { line-height: $height-value; }
}

// Text alignment
.text-left { text-align: left; }
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-justify { text-align: justify; }

// Text decoration
.underline { text-decoration: underline; }
.line-through { text-decoration: line-through; }
.no-underline { text-decoration: none; }

// Text transform
.uppercase { text-transform: uppercase; }
.lowercase { text-transform: lowercase; }
.capitalize { text-transform: capitalize; }
.normal-case { text-transform: none; }

// Border utilities
.border { border: 1px solid rgb(var(--border-primary)); }
.border-0 { border-width: 0; }
.border-2 { border-width: 2px; }
.border-4 { border-width: 4px; }

// Border radius
$border-radius: (
  none: 0,
  sm: 0.125rem,
  default: 0.25rem,
  md: 0.375rem,
  lg: 0.5rem,
  xl: 0.75rem,
  full: 9999px
);

@each $radius-key, $radius-value in $border-radius {
  .rounded-#{$radius-key} { border-radius: $radius-value; }
}

// Overflow utilities
.overflow-auto { overflow: auto; }
.overflow-hidden { overflow: hidden; }
.overflow-visible { overflow: visible; }
.overflow-scroll { overflow: scroll; }
.overflow-x-auto { overflow-x: auto; }
.overflow-y-auto { overflow-y: auto; }

// Z-index utilities
@for $i from 0 through 50 {
  @if $i % 10 == 0 {
    .z-#{$i} { z-index: $i; }
  }
}

// Opacity utilities
@for $i from 0 through 100 {
  @if $i % 25 == 0 {
    .opacity-#{$i} { opacity: math.div($i, 100); }
  }
}

// Responsive classes
@each $breakpoint-key, $breakpoint-value in v.$breakpoints {
  @media (min-width: $breakpoint-value) {
    // Display
    .#{$breakpoint-key}\:block { display: block; }
    .#{$breakpoint-key}\:flex { display: flex; }
    .#{$breakpoint-key}\:grid { display: grid; }
    .#{$breakpoint-key}\:hidden { display: none; }
    
    // Grid columns
    .#{$breakpoint-key}\:grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .#{$breakpoint-key}\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .#{$breakpoint-key}\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .#{$breakpoint-key}\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    
    // Flexbox
    .#{$breakpoint-key}\:flex-row { flex-direction: row; }
    .#{$breakpoint-key}\:flex-col { flex-direction: column; }
    
    // Text alignment
    .#{$breakpoint-key}\:text-left { text-align: left; }
    .#{$breakpoint-key}\:text-center { text-align: center; }
    .#{$breakpoint-key}\:text-right { text-align: right; }

    // Animation
    .#{$breakpoint-key}\:animated { animation-duration: 1s; animation-fill-mode: both; }
    .#{$breakpoint-key}\:animation-none { animation: none; }
    .#{$breakpoint-key}\:animation-spin { animation: spin 1s linear infinite; }
    .#{$breakpoint-key}\:animation-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }

    // Shadows
    .#{$breakpoint-key}\:shadow-none { box-shadow: none; }
    .#{$breakpoint-key}\:shadow { box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1); }
    .#{$breakpoint-key}\:shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    
    // Font sizes
    @each $size-key, $size-value in v.$font-sizes {
      .#{$breakpoint-key}\:text-#{$size-key} { font-size: $size-value; }
    }
    
    // Spacing (margins and paddings)
    @each $space-key, $space-value in v.$spacings {
      .#{$breakpoint-key}\:m-#{$space-key} { margin: $space-value; }
      .#{$breakpoint-key}\:mx-#{$space-key} { margin-inline: $space-value; }
      .#{$breakpoint-key}\:my-#{$space-key} { margin-block: $space-value; }
      .#{$breakpoint-key}\:p-#{$space-key} { padding: $space-value; }
      .#{$breakpoint-key}\:px-#{$space-key} { padding-inline: $space-value; }
      .#{$breakpoint-key}\:py-#{$space-key} { padding-block: $space-value; }
    }
  }
}


@each $weight-name, $weight-value in v.$font-weights {
    .font-#{$weight-name} {
      font-weight: $weight-value;
    }
  }
  


  @mixin generate-color-utilities($prefix, $colors) {
    @each $color, $shades in $colors {
      @each $shade, $value in $shades {
        .#{$prefix}-#{"#{$color}"}-#{$shade} {
          @if $prefix == 'text' {
            color: $value;
          } @else if $prefix == 'bg' {
            background-color: $value;
          }
        }
      }
    }
  }
  

// Call the Mixin to Generate Text and Background Utilities
@include generate-color-utilities('text', v.$colors);
@include generate-color-utilities('bg', v.$colors);