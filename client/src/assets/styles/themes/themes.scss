@use "sass:map";
@use "sass:meta";
@use "sass:color";
@use "sass:list";

// Color Tokens Definition
$color-tokens: (
  neutral: (
    50: #FFFFFF,
    100: #F5F7F8,
    150: #E8EBEC,
    200: #E1E7E9,
    250: #D4D9DB,
    300: #C7CED1,
    350: #B9C1C4,
    400: #A5AFB4,
    500: #7A878E,
    600: #526167,
    700: #334347,
    800: #1F2A2E,
    900: #0A1214
  ),
  brand: (
    primary: (
      base: #264653,
      light: color.scale(#264653, $lightness: 20%),
      dark: color.scale(#264653, $lightness: -20%),
      muted: color.scale(#264653, $saturation: -30%)
    ),
    secondary: (
      base: #2a9d8f,
      light: color.scale(#85cec5, $lightness: 20%),
      dark: color.scale(#85cec5, $lightness: -20%),
      muted: color.scale(#85cec5, $saturation: -30%)
    )
  ),
  ui: (
    background: #FFFFFF,
    surface: #F5F7F8,
    border: #C7CED1
  ),
  text: (
    primary: #1A2224,
    secondary: #526167,
    light: color.scale(#2a9d8f, $saturation: -30%),
    muted: #7A878E,
    inverse: #FFFFFF
  ),
  state: (
    success: (
      base: #2A8464,
      light: #4CA085,
      dark: #1B6B4D
    ),
    warning: (
      base: #D99836,
      light: #E6B05C,
      dark: #B37D24
    ),
    error: (
      base: #D94545,
      light: #E66A6A,
      dark: #B32F2F
    )
  )
);

// Color Retrieval Function
@function get-color($category, $shade: 'base', $variant: null) {
  @if not map.has-key($color-tokens, $category) {
    @error 'Color category "#{$category}" does not exist. Available categories: #{map-keys($color-tokens)}';
  }

  $selected-category: map.get($color-tokens, $category);

  @if $variant != null {
    @if not map.has-key($selected-category, $shade) {
      @error 'Shade "#{$shade}" not found in category "#{$category}". Available shades: #{map-keys($selected-category)}';
    }

    $shade-map: map.get($selected-category, $shade);

    @if not map.has-key($shade-map, $variant) {
      @error 'Variant "#{$variant}" not found in shade "#{$shade}" of category "#{$category}". Available variants: #{map-keys($shade-map)}';
    }

    @return map.get($shade-map, $variant);
  }

  @if not map.has-key($selected-category, $shade) {
    @error 'Shade "#{$shade}" not found in category "#{$category}". Available shades: #{map-keys($selected-category)}';
  }

  @return map.get($selected-category, $shade);
}

// Theme Generation Mixin
@mixin generate-theme($mode: 'light') {
  @if $mode != 'light' and $mode != 'dark' {
    @error 'Invalid theme mode. Use "light" or "dark".';
  }

  // Background Colors
  --color-bg-primary: #{get-color('neutral', if($mode == 'light', 50, 900))};
  --color-bg-secondary: #{get-color('neutral', if($mode == 'light', 100, 800))};
  --color-bg-tertiary: #{get-color('neutral', if($mode == 'light', 200, 700))};

  // Text Colors
  --color-text-primary: #{get-color('neutral', if($mode == 'light', 900, 50))};
  --color-text-secondary: #{get-color('neutral', if($mode == 'light', 700, 200))};
  --color-text-muted: #{get-color('neutral', if($mode == 'light', 500, 400))};

  // Brand Colors
  @each $type in ('primary', 'secondary') {
    @each $variant in ('base', 'light', 'dark', 'muted') {
      --color-brand-#{$type}-#{$variant}: #{if($mode == 'light', get-color('brand', $type, $variant), color.scale(get-color('brand', $type, $variant), $lightness: 20%))};
    }
  }

  // State Colors
  @each $state in ('success', 'warning', 'error') {
    @each $variant in ('base', 'light', 'dark') {
      --color-#{$state}-#{$variant}: #{if($mode == 'light', get-color('state', $state, $variant), color.scale(get-color('state', $state, $variant), $lightness: 20%))};
    }
  }

  // Border and Divider Colors
  --color-border-primary: #{get-color('neutral', if($mode == 'light', 300, 600))};
  --color-border-subtle: #{get-color('neutral', if($mode == 'light', 200, 700))};

  // Overlay Variations
  @each $intensity in ('light', 'medium', 'dark') {
    --color-overlay-#{$intensity}: #{rgba(get-color('neutral', if($mode == 'light', 900, 50)), if($mode == 'light', 0.1 * list.index(('light', 'medium', 'dark'), $intensity), 0.2 * list.index(('light', 'medium', 'dark'), $intensity)))};
  }
}

// Default Light Theme
:root {
  @include generate-theme($mode: 'light');
}

// Dark Theme
[data-theme="dark"] {
  @include generate-theme($mode: 'dark');
}